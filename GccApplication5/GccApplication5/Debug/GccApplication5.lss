
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e32  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096e  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067f  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000613  00000000  00000000  000029fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000300e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 13 01 	call	0x226	; 0x226 <main>
  88:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  90:	2e 9a       	sbi	0x05, 6	; 5
  92:	00 c0       	rjmp	.+0      	; 0x94 <toggle_e+0x4>
  94:	2e 98       	cbi	0x05, 6	; 5
  96:	08 95       	ret

00000098 <lcd_write>:
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	d8 2f       	mov	r29, r24
  9e:	66 23       	and	r22, r22
  a0:	11 f0       	breq	.+4      	; 0xa6 <lcd_write+0xe>
  a2:	2c 9a       	sbi	0x05, 4	; 5
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0x10>
  a6:	2c 98       	cbi	0x05, 4	; 5
  a8:	2d 98       	cbi	0x05, 5	; 5
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	c5 b1       	in	r28, 0x05	; 5
  b2:	c0 7f       	andi	r28, 0xF0	; 240
  b4:	8d 2f       	mov	r24, r29
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8c 2b       	or	r24, r28
  bc:	85 b9       	out	0x05, r24	; 5
  be:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
  c2:	df 70       	andi	r29, 0x0F	; 15
  c4:	dc 2b       	or	r29, r28
  c6:	d5 b9       	out	0x05, r29	; 5
  c8:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
  cc:	cf 60       	ori	r28, 0x0F	; 15
  ce:	c5 b9       	out	0x05, r28	; 5
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <lcd_read>:
  d6:	88 23       	and	r24, r24
  d8:	11 f0       	breq	.+4      	; 0xde <lcd_read+0x8>
  da:	2c 9a       	sbi	0x05, 4	; 5
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <lcd_read+0xa>
  de:	2c 98       	cbi	0x05, 4	; 5
  e0:	2d 9a       	sbi	0x05, 5	; 5
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	2e 9a       	sbi	0x05, 6	; 5
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_read+0x16>
  ec:	93 b1       	in	r25, 0x03	; 3
  ee:	2e 98       	cbi	0x05, 6	; 5
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_read+0x1c>
  f2:	2e 9a       	sbi	0x05, 6	; 5
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_read+0x20>
  f6:	23 b1       	in	r18, 0x03	; 3
  f8:	2f 70       	andi	r18, 0x0F	; 15
  fa:	89 2f       	mov	r24, r25
  fc:	82 95       	swap	r24
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	2e 98       	cbi	0x05, 6	; 5
 102:	82 2b       	or	r24, r18
 104:	08 95       	ret

00000106 <lcd_waitbusy>:
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_read>
 10c:	88 23       	and	r24, r24
 10e:	dc f3       	brlt	.-10     	; 0x106 <lcd_waitbusy>
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_waitbusy+0xe>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_read>
 11e:	08 95       	ret

00000120 <lcd_command>:
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	0e 94 83 00 	call	0x106	; 0x106 <lcd_waitbusy>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd_gotoxy>:
 134:	61 11       	cpse	r22, r1
 136:	04 c0       	rjmp	.+8      	; 0x140 <lcd_gotoxy+0xc>
 138:	80 58       	subi	r24, 0x80	; 128
 13a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
 13e:	08 95       	ret
 140:	80 54       	subi	r24, 0x40	; 64
 142:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
 146:	08 95       	ret

00000148 <lcd_home>:
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
 14e:	08 95       	ret

00000150 <lcd_putc>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 83 00 	call	0x106	; 0x106 <lcd_waitbusy>
 158:	ca 30       	cpi	r28, 0x0A	; 10
 15a:	49 f4       	brne	.+18     	; 0x16e <lcd_putc+0x1e>
 15c:	80 34       	cpi	r24, 0x40	; 64
 15e:	10 f0       	brcs	.+4      	; 0x164 <lcd_putc+0x14>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	01 c0       	rjmp	.+2      	; 0x166 <lcd_putc+0x16>
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	80 58       	subi	r24, 0x80	; 128
 168:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
 16c:	04 c0       	rjmp	.+8      	; 0x176 <lcd_putc+0x26>
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_write>
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <lcd_puts>:
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ec 01       	movw	r28, r24
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	88 23       	and	r24, r24
 188:	29 f0       	breq	.+10     	; 0x194 <lcd_puts+0x1a>
 18a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_putc>
 18e:	89 91       	ld	r24, Y+
 190:	81 11       	cpse	r24, r1
 192:	fb cf       	rjmp	.-10     	; 0x18a <lcd_puts+0x10>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	8f 67       	ori	r24, 0x7F	; 127
 1a6:	84 b9       	out	0x04, r24	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	9a ef       	ldi	r25, 0xFA	; 250
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1b0:	29 9a       	sbi	0x05, 1	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1b2:	28 9a       	sbi	0x05, 0	; 5
    lcd_e_toggle();
 1b4:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1c0:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d1 e0       	ldi	r29, 0x01	; 1
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ce:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d2:	ce 01       	movw	r24, r28
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d8:	28 98       	cbi	0x05, 0	; 5
    lcd_e_toggle();
 1da:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	21 97       	sbiw	r28, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e8:	88 e0       	ldi	r24, 0x08	; 8
 1ea:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
    
	
	//lcd_clrscr();                           /* display clear                */ 
	lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>
	lcd_command(dispAttr);                  /* display/cursor control       */
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_command>

}/* lcd_init */
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <__vector_1>:
ISR(INT0_vect){
	PORTD ^= (1<<0);
}
void AVRInit()
{
	 DDRC = 0x02;
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	9b b1       	in	r25, 0x0b	; 11
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	89 27       	eor	r24, r25
 216:	8b b9       	out	0x0b, r24	; 11
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <main>:
unsigned int analogResult = 0;
unsigned int binary_weighted_voltage_low;
unsigned int binary_weighted_voltage_high;

int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	2a 97       	sbiw	r28, 0x0a	; 10
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
ISR(INT0_vect){
	PORTD ^= (1<<0);
}
void AVRInit()
{
	 DDRC = 0x02;
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	97 b9       	out	0x07, r25	; 7
unsigned int binary_weighted_voltage_high;

int main(void)
{
	AVRInit();
	DDRD = 0b00000001;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	8a b9       	out	0x0a, r24	; 10
	
	PORTD &= ~(1<<0);// inicia en 0
 242:	58 98       	cbi	0x0b, 0	; 11
	
	EICRA = 0b00000010;
 244:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	EIMSK = 0b00000001;
 248:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0b00000000;
 24a:	1c ba       	out	0x1c, r1	; 28
	sei();
 24c:	78 94       	sei
	
		
	ADMUX |= (0 << REFS1)|(1 << REFS0)|(0 << ADLAR)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(1 << MUX0);
 24e:	ec e7       	ldi	r30, 0x7C	; 124
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 64       	ori	r24, 0x41	; 65
 256:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN)|(0 << ADSC)|(0 << ADATE)|(0 << ADIF)|(0 << ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 258:	ea e7       	ldi	r30, 0x7A	; 122
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	87 68       	ori	r24, 0x87	; 135
 260:	80 83       	st	Z, r24
	ADCSRB |= (0 << ADTS2)|(0 << ADTS1)|(0 << ADTS0);
 262:	eb e7       	ldi	r30, 0x7B	; 123
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	80 83       	st	Z, r24
	while (1)
	{
		ADCSRA |= (1 << ADSC);
 26a:	0a e7       	ldi	r16, 0x7A	; 122
 26c:	10 e0       	ldi	r17, 0x00	; 0
		while (ADCSRA & (1 << ADSC));
		binary_weighted_voltage_low = ADCL;
 26e:	0f 2e       	mov	r0, r31
 270:	f8 e7       	ldi	r31, 0x78	; 120
 272:	cf 2e       	mov	r12, r31
 274:	d1 2c       	mov	r13, r1
 276:	f0 2d       	mov	r31, r0
		binary_weighted_voltage_high = (ADCH << 8);
 278:	0f 2e       	mov	r0, r31
 27a:	f9 e7       	ldi	r31, 0x79	; 121
 27c:	ef 2e       	mov	r14, r31
 27e:	f1 2c       	mov	r15, r1
 280:	f0 2d       	mov	r31, r0
	ADMUX |= (0 << REFS1)|(1 << REFS0)|(0 << ADLAR)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(1 << MUX0);
	ADCSRA |= (1 << ADEN)|(0 << ADSC)|(0 << ADATE)|(0 << ADIF)|(0 << ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
	ADCSRB |= (0 << ADTS2)|(0 << ADTS1)|(0 << ADTS0);
	while (1)
	{
		ADCSRA |= (1 << ADSC);
 282:	f8 01       	movw	r30, r16
 284:	80 81       	ld	r24, Z
 286:	80 64       	ori	r24, 0x40	; 64
 288:	80 83       	st	Z, r24
		while (ADCSRA & (1 << ADSC));
 28a:	f8 01       	movw	r30, r16
 28c:	80 81       	ld	r24, Z
 28e:	86 fd       	sbrc	r24, 6
 290:	fc cf       	rjmp	.-8      	; 0x28a <main+0x64>
		binary_weighted_voltage_low = ADCL;
 292:	f6 01       	movw	r30, r12
 294:	80 81       	ld	r24, Z
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <binary_weighted_voltage_low+0x1>
 29e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <binary_weighted_voltage_low>
		binary_weighted_voltage_high = (ADCH << 8);
 2a2:	f7 01       	movw	r30, r14
 2a4:	90 81       	ld	r25, Z
 2a6:	89 2f       	mov	r24, r25
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	98 2f       	mov	r25, r24
 2ac:	88 27       	eor	r24, r24
 2ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <binary_weighted_voltage_high+0x1>
 2b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <binary_weighted_voltage_high>
		
		analogResult = binary_weighted_voltage_low | binary_weighted_voltage_high;
 2b6:	82 2b       	or	r24, r18
 2b8:	93 2b       	or	r25, r19
 2ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		char k [10];
		itoa(analogResult,k,10);
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	be 01       	movw	r22, r28
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <itoa>

		lcd_init(LCD_DISP_ON);
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
 2d2:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_init>
		lcd_home();
 2d6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_home>
		lcd_gotoxy(9,0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	89 e0       	ldi	r24, 0x09	; 9
 2de:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_gotoxy>
		lcd_puts(k);
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	ff ef       	ldi	r31, 0xFF	; 255
 2ec:	21 ee       	ldi	r18, 0xE1	; 225
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	f1 50       	subi	r31, 0x01	; 1
 2f2:	20 40       	sbci	r18, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0xca>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xd4>
 2fa:	00 00       	nop
		_delay_ms (100);
	}
 2fc:	c2 cf       	rjmp	.-124    	; 0x282 <main+0x5c>

000002fe <itoa>:
 2fe:	45 32       	cpi	r20, 0x25	; 37
 300:	51 05       	cpc	r21, r1
 302:	20 f4       	brcc	.+8      	; 0x30c <itoa+0xe>
 304:	42 30       	cpi	r20, 0x02	; 2
 306:	10 f0       	brcs	.+4      	; 0x30c <itoa+0xe>
 308:	0c 94 8a 01 	jmp	0x314	; 0x314 <__itoa_ncheck>
 30c:	fb 01       	movw	r30, r22
 30e:	10 82       	st	Z, r1
 310:	cb 01       	movw	r24, r22
 312:	08 95       	ret

00000314 <__itoa_ncheck>:
 314:	bb 27       	eor	r27, r27
 316:	4a 30       	cpi	r20, 0x0A	; 10
 318:	31 f4       	brne	.+12     	; 0x326 <__itoa_ncheck+0x12>
 31a:	99 23       	and	r25, r25
 31c:	22 f4       	brpl	.+8      	; 0x326 <__itoa_ncheck+0x12>
 31e:	bd e2       	ldi	r27, 0x2D	; 45
 320:	90 95       	com	r25
 322:	81 95       	neg	r24
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	0c 94 96 01 	jmp	0x32c	; 0x32c <__utoa_common>

0000032a <__utoa_ncheck>:
 32a:	bb 27       	eor	r27, r27

0000032c <__utoa_common>:
 32c:	fb 01       	movw	r30, r22
 32e:	55 27       	eor	r21, r21
 330:	aa 27       	eor	r26, r26
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	aa 1f       	adc	r26, r26
 338:	a4 17       	cp	r26, r20
 33a:	10 f0       	brcs	.+4      	; 0x340 <__utoa_common+0x14>
 33c:	a4 1b       	sub	r26, r20
 33e:	83 95       	inc	r24
 340:	50 51       	subi	r21, 0x10	; 16
 342:	b9 f7       	brne	.-18     	; 0x332 <__utoa_common+0x6>
 344:	a0 5d       	subi	r26, 0xD0	; 208
 346:	aa 33       	cpi	r26, 0x3A	; 58
 348:	08 f0       	brcs	.+2      	; 0x34c <__utoa_common+0x20>
 34a:	a9 5d       	subi	r26, 0xD9	; 217
 34c:	a1 93       	st	Z+, r26
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	79 f7       	brne	.-34     	; 0x330 <__utoa_common+0x4>
 352:	b1 11       	cpse	r27, r1
 354:	b1 93       	st	Z+, r27
 356:	11 92       	st	Z+, r1
 358:	cb 01       	movw	r24, r22
 35a:	0c 94 af 01 	jmp	0x35e	; 0x35e <strrev>

0000035e <strrev>:
 35e:	dc 01       	movw	r26, r24
 360:	fc 01       	movw	r30, r24
 362:	67 2f       	mov	r22, r23
 364:	71 91       	ld	r23, Z+
 366:	77 23       	and	r23, r23
 368:	e1 f7       	brne	.-8      	; 0x362 <strrev+0x4>
 36a:	32 97       	sbiw	r30, 0x02	; 2
 36c:	04 c0       	rjmp	.+8      	; 0x376 <strrev+0x18>
 36e:	7c 91       	ld	r23, X
 370:	6d 93       	st	X+, r22
 372:	70 83       	st	Z, r23
 374:	62 91       	ld	r22, -Z
 376:	ae 17       	cp	r26, r30
 378:	bf 07       	cpc	r27, r31
 37a:	c8 f3       	brcs	.-14     	; 0x36e <strrev+0x10>
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
